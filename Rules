#!/usr/bin/env ruby
# -*- coding: utf-8 -*-

# A few helpful tips about the Rules file:
#
# * The string given to #compile and #route are matching patterns for
#   identifiers--not for paths. Therefore, you can’t match on extension.
#
# * The order of rules is important: for each item, only the first matching
#   rule is applied.
#
# * Item identifiers start and end with a slash (e.g. “/about/” for the file
#   “content/about.html”). To select all children, grandchildren, … of an
#   item, use the pattern “/about/*/”; “/about/*” will also select the parent,
#   because “*” matches zero or more characters.

compile 'sitemap' do
  filter :haml
end

route 'sitemap' do
  item.identifier.chop + '.xml'
end

compile '/static/*' do
end

compile '/CNAME/' do
end

compile '/api/0.5.0/*' do
  filter :erb
  filter :kramdown,
         :toc_levels => [2,3],
         :enable_coderay => true,
         :coderay_line_numbers => nil
  filter :colorize_syntax,
         :colorizers => {:javascript => :pygmentsrb}
  layout item[:layout] || '0.5.0'
end

compile '/api/0.6.0/*' do
  filter :erb
  filter :kramdown,
         :toc_levels => [2,3],
         :enable_coderay => true,
         :coderay_line_numbers => nil
  filter :colorize_syntax,
         :colorizers => {:javascript => :pygmentsrb}
  layout item[:layout] || '0.6.0'
end

compile '/api/*' do
  filter :erb
  filter :kramdown,
         :toc_levels => [2,3],
         :enable_coderay => true,
         :coderay_line_numbers => nil
  filter :colorize_syntax,
         :colorizers => {:javascript => :pygmentsrb}
  layout item[:layout] || 'api'
end

compile '/guides/*' do
  filter :kramdown,
         :toc_levels => [2],
         :enable_coderay => true,
         :coderay_line_numbers => :table,
         :coderay_css => :class,
         :coderay_bold_every => false
  filter :erb
  filter :colorize_syntax, :default_colorizer => :pygmentsrb
  layout item[:layout] || 'guides'
end

compile '/aboutus/*' do
  filter :kramdown, :toc_levels => [2]
  filter :erb
  filter :colorize_syntax, :default_colorizer => :pygmentsrb
  layout item[:layout] || 'aboutus'
end

compile '*' do
  if item.binary?
    # don’t filter binary items
  else
    filter :erb
    filter :kramdown
    layout item[:layout] || 'default'
  end
end

route '/static/*' do
  item.identifier[7..-2]
end

route '/CNAME/' do
  '/CNAME'
end

route '*' do
  if item.binary?
    # Write item with identifier /foo/ to /foo.ext
    item.identifier.chop + '.' + item[:extension]
  else
    # Write item with identifier /foo/ to /foo/index.html
    item.identifier + 'index.html'
  end
end

layout '*', :erb
